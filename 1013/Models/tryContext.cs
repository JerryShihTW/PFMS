// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace _1013.Models;

public partial class tryContext : DbContext
{
    public tryContext(DbContextOptions<tryContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Budget> Budget { get; set; }

    public virtual DbSet<Invoice> Invoice { get; set; }

    public virtual DbSet<RecurringExpense> RecurringExpense { get; set; }

    public virtual DbSet<UserSelectedInvoice> UserSelectedInvoice { get; set; }

    public virtual DbSet<expenses> expenses { get; set; }

    public virtual DbSet<income> income { get; set; }

    public virtual DbSet<member> member { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Budget>(entity =>
        {
            entity.Property(e => e.account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.enddate).HasColumnType("datetime");
            entity.Property(e => e.startdate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VehicleNumber)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RecurringExpense>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DayOfWeek).HasMaxLength(50);
            entity.Property(e => e.FrequencyType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Note).HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.account)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserSelectedInvoice>(entity =>
        {
            entity.Property(e => e.InvoiceNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.account)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<expenses>(entity =>
        {
            entity.Property(e => e.account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.date).HasColumnType("datetime");
            entity.Property(e => e.note).HasMaxLength(50);
        });

        modelBuilder.Entity<income>(entity =>
        {
            entity.Property(e => e.account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.date).HasColumnType("datetime");
        });

        modelBuilder.Entity<member>(entity =>
        {
            entity.HasKey(e => e.account);

            entity.Property(e => e.account)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResetPasswordToken)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TokenExpiration).HasColumnType("datetime");
            entity.Property(e => e.VehicleNumber).HasMaxLength(50);
            entity.Property(e => e.mail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.salt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}